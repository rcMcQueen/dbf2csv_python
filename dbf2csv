#!/usr/bin/env python

import sys
import os
import csv
from dbfpy import dbf

path = ""
opts = []

for arg in sys.argv[1:]:
    if arg.startswith('-'):
        for character in arg[1:]:
            opts.append(character)
    else:
        path = arg

if 'h' in opts:
    print \
"""
dbf2csv [OPTION]... FILE

    -r  Converts all files within directory recursively
    -d  Delete files after conversion
"""

    sys.exit(0)

if path == "":
    path = raw_input("Enter your path where your files are located (Ex: /Users/Ryan/Downloads/)\n> ")


def convert_dbf(in_db, csv_file):
    out_csv = csv.writer(csv_file)
    names = []
    # creates the columns
    for field in in_db.header.fields:
        names.append(field.name)
    out_csv.writerow(names)
    # writes the rows

    for rec in in_db:
        out_csv.writerow(rec.fieldData)


def convert_dbfs(localpath, _user_called=True, _total_count=0.0, _count=0):
    if os.path.isdir(localpath):
        # Find total number of files
        if _user_called:
            print "Counting total items"
            for dirpath, dirname, filenames in os.walk(localpath):
                for filename in filenames:
                    if filename.endswith(".dbf"):
                        _total_count += 1
            print "Converting %d items..." % _total_count
        # Search for the items within the directory
        for filename in os.listdir(localpath):
            # if there is a directory, run method recursively
            new_path = os.path.join(localpath, filename)
            if os.path.isdir(new_path) and 'r' in opts:
                _count = convert_dbfs(new_path, False, _total_count, _count)
            # if it is a .dbf file, convert to csv format
            elif filename.endswith('.dbf'):
                # create the csv file
                csv_fn = localpath + '/' + filename[:-4] + ".csv"
                with open(csv_fn, 'wb') as csv_file:
                    in_db = dbf.Dbf(os.path.join(localpath, filename))
                    convert_dbf(in_db, csv_file)
                    in_db.close()
                    if 'd' in opts:
                        os.remove(localpath + '/' + filename)
                    _count += 1

                    # Printing stuff
                    ratio = (_count / _total_count)
                    progress_length = int(ratio * 40)
                    sys.stdout.write(
                        '\r[' + ("=" * progress_length) + " " * (40 - progress_length) + ']%d' % (ratio * 100) + "%")
                    sys.stdout.flush()

        if _user_called:
            print "\nConversion finished. \n%d files converted" % _count

        return _count

    elif os.path.isfile(localpath):
        with open(localpath[:-4] + ".csv", 'wb') as csv_file, dbf.Dbf(localpath) as in_db:
            convert_dbf(in_db, csv_file)
            if 'd' in opts:
                os.remove(localpath)
    else:
        print "Neither file nor directory"


print "Starting Conversion"
convert_dbfs(path)
